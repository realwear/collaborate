/**
 * Copyright (C) 2024 RealWear, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { imageToBase64, resizeImageBlob } from '@nx/uxlib';
import { marked } from 'marked';

const headerTemplate = `
<style>
html {-webkit-print-color-adjust: exact;}
html, body {
  width: 100%;
  overflow: hidden;
}
.svg-container {
  width: 100%;
  margin-top: -18px;
  max-width: 900px; /* Width in pixels corresponding to 210mm for A4 */
  overflow: hidden;
}
svg {
  width: 110%; /* Make SVG responsive, adjusting to the container's width */
  height: auto; /* Maintain the aspect ratio */
  margin-top: -18px;
}
</style>
<div class="svg-container">
            <!-- Inline SVG code starts here -->
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="2356px" height="380px" viewBox="0 0 2480 380" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink">
            <g><path style="opacity:1" fill="#23036a" d="M -0.5,-0.5 C 784.833,-0.5 1570.17,-0.5 2355.5,-0.5C 2355.5,126.167 2355.5,252.833 2355.5,379.5C 1570.17,379.5 784.833,379.5 -0.5,379.5C -0.5,252.833 -0.5,126.167 -0.5,-0.5 Z"/></g>
            <g><path style="opacity:1" fill="#fdfdfe" d="M 108.5,134.5 C 108.44,133.957 108.107,133.624 107.5,133.5C 106.833,180.332 106.167,226.998 105.5,273.5C 94.8354,263.67 84.0021,254.003 73,244.5C 72.5,197.835 72.3333,151.168 72.5,104.5C 89.8365,104.333 107.17,104.5 124.5,105C 141.021,119.022 157.687,132.855 174.5,146.5C 191.313,132.855 207.979,119.022 224.5,105C 241.83,104.5 259.163,104.333 276.5,104.5C 276.667,151.168 276.5,197.835 276,244.5C 265,254.5 254,264.5 243,274.5C 242.667,227.5 242.333,180.5 242,133.5C 231.021,142.312 220.187,151.312 209.5,160.5C 208.667,178.824 208.167,197.158 208,215.5C 196.924,206.712 185.757,198.046 174.5,189.5C 163.476,198.358 152.31,207.024 141,215.5C 140.667,197.167 140.333,178.833 140,160.5C 129.335,151.999 118.835,143.332 108.5,134.5 Z"/></g>
            <g><path style="opacity:1" fill="#634c95" d="M 108.5,134.5 C 107.501,180.664 107.168,226.997 107.5,273.5C 121.323,274.496 135.323,274.829 149.5,274.5C 135.339,275.661 121.006,275.827 106.5,275C 105.944,274.617 105.611,274.117 105.5,273.5C 106.167,226.998 106.833,180.332 107.5,133.5C 108.107,133.624 108.44,133.957 108.5,134.5 Z"/></g>
            <g><path style="opacity:1" fill="#fefefe" d="M 550.5,134.5 C 557.5,134.5 564.5,134.5 571.5,134.5C 571.5,170.5 571.5,206.5 571.5,242.5C 564.5,242.5 557.5,242.5 550.5,242.5C 550.5,206.5 550.5,170.5 550.5,134.5 Z"/></g>
            <g><path style="opacity:1" fill="#fbd408" d="M 994.5,157.5 C 1000.21,157.171 1005.87,157.505 1011.5,158.5C 1022.24,186.381 1032.57,214.381 1042.5,242.5C 1036.17,242.5 1029.83,242.5 1023.5,242.5C 1021.83,236.5 1020.17,230.5 1018.5,224.5C 1008.15,224.168 997.812,224.501 987.5,225.5C 985.593,231.055 983.593,236.555 981.5,242C 975.167,242.667 968.833,242.667 962.5,242C 973.268,213.86 983.935,185.694 994.5,157.5 Z"/></g>
            <g><path style="opacity:1" fill="#f9d211" d="M 1052.5,157.5 C 1058.5,157.5 1064.5,157.5 1070.5,157.5C 1070.5,185.833 1070.5,214.167 1070.5,242.5C 1064.5,242.5 1058.5,242.5 1052.5,242.5C 1052.5,214.167 1052.5,185.833 1052.5,157.5 Z"/></g>
            <g><path style="opacity:1" fill="#fefdfe" d="M 366.5,162.5 C 370.167,162.5 373.833,162.5 377.5,162.5C 377.5,169.5 377.5,176.5 377.5,183.5C 364.361,179.702 355.194,184.036 350,196.5C 348.565,211.775 348.065,227.109 348.5,242.5C 341.5,242.5 334.5,242.5 327.5,242.5C 327.5,216.5 327.5,190.5 327.5,164.5C 334.167,164.5 340.833,164.5 347.5,164.5C 347.334,169.179 347.501,173.845 348,178.5C 352.217,170.774 358.384,165.441 366.5,162.5 Z"/></g>
            <g><path style="opacity:1" fill="#fcfcfd" d="M 412.5,162.5 C 444.571,160.904 460.238,176.237 459.5,208.5C 440.833,208.5 422.167,208.5 403.5,208.5C 404.934,225.408 413.934,231.575 430.5,227C 434.246,225.631 436.912,223.131 438.5,219.5C 444.798,218.504 451.132,218.17 457.5,218.5C 453.633,233.531 443.966,242.031 428.5,244C 404.878,247.023 389.711,237.19 383,214.5C 378.664,188.813 388.498,171.48 412.5,162.5 Z"/></g>
            <g><path style="opacity:1" fill="#fbfafc" d="M 491.5,162.5 C 500.884,162.184 510.218,162.684 519.5,164C 528.062,165.564 533.896,170.397 537,178.5C 537.333,196.833 537.667,215.167 538,233.5C 538.502,236.513 539.002,239.513 539.5,242.5C 532.468,242.83 525.468,242.497 518.5,241.5C 517.959,239.465 517.292,237.465 516.5,235.5C 506.517,243.329 495.184,246.162 482.5,244C 467.619,239.742 461.785,229.909 465,214.5C 467.072,207.427 471.572,202.594 478.5,200C 489.086,197.565 499.752,195.565 510.5,194C 512.492,193.426 513.992,192.259 515,190.5C 516.709,180.705 512.542,176.038 502.5,176.5C 493.745,175.931 489.078,179.931 488.5,188.5C 481.167,188.5 473.833,188.5 466.5,188.5C 467.042,180.582 470.376,174.082 476.5,169C 481.367,166.226 486.367,164.059 491.5,162.5 Z"/></g>
            <g><path style="opacity:1" fill="#faf9fb" d="M 730.5,161.5 C 761.359,161.696 776.359,177.363 775.5,208.5C 756.833,208.5 738.167,208.5 719.5,208.5C 721.193,226.192 730.527,232.025 747.5,226C 750.695,224.305 753.028,221.805 754.5,218.5C 760.833,217.167 767.167,217.167 773.5,218.5C 768.98,232.853 759.313,241.353 744.5,244C 711.423,244.92 695.923,228.754 698,195.5C 701.926,177.41 712.76,166.076 730.5,161.5 Z"/></g>
            <g><path style="opacity:1" fill="#faf9fb" d="M 805.5,187.5 C 798.5,187.5 791.5,187.5 784.5,187.5C 784.5,186.167 784.5,184.833 784.5,183.5C 787.108,174.052 793.108,167.552 802.5,164C 817.218,159.947 831.552,160.947 845.5,167C 849.52,170.011 852.353,173.844 854,178.5C 854.333,196.833 854.667,215.167 855,233.5C 855.502,236.513 856.002,239.513 856.5,242.5C 849.468,242.83 842.468,242.497 835.5,241.5C 834.959,239.465 834.292,237.465 833.5,235.5C 820.018,245.303 805.685,246.803 790.5,240C 782.271,232.977 779.437,224.144 782,213.5C 786.346,203.228 794.179,197.728 805.5,197C 812.264,196.647 818.93,195.647 825.5,194C 832.167,192.381 834.333,188.214 832,181.5C 830.622,178.892 828.455,177.392 825.5,177C 820.382,176.112 815.382,176.445 810.5,178C 807.108,180.285 805.441,183.452 805.5,187.5 Z"/></g>
            <g><path style="opacity:1" fill="#fdfdfd" d="M 889.5,200.5 C 888.504,213.99 888.171,227.656 888.5,241.5C 881.5,241.5 874.5,241.5 867.5,241.5C 867.5,215.5 867.5,189.5 867.5,163.5C 874.167,163.5 880.833,163.5 887.5,163.5C 887.334,168.179 887.501,172.845 888,177.5C 894.053,165.725 903.553,160.725 916.5,162.5C 917.497,169.134 917.83,175.8 917.5,182.5C 901.866,178.972 892.532,184.972 889.5,200.5 Z"/></g>
            <g><path style="opacity:1" fill="#715d9f" d="M 601.5,164.5 C 593.981,164.175 586.648,164.508 579.5,165.5C 578.957,165.44 578.624,165.107 578.5,164.5C 586.323,163.18 593.99,163.18 601.5,164.5 Z"/></g>
            <g><path style="opacity:1" fill="#8e7db3" d="M 677.5,164.5 C 684.677,163.181 692.01,163.181 699.5,164.5C 699.376,165.107 699.043,165.44 698.5,165.5C 691.687,164.509 684.687,164.175 677.5,164.5 Z"/></g>
            <g><path style="opacity:1" fill="#fbfbfc" d="M 601.5,164.5 C 606.016,181.882 610.849,199.215 616,216.5C 620.07,199.46 624.237,182.46 628.5,165.5C 635.724,164.188 642.891,164.188 650,165.5C 653.868,182.639 658.201,199.639 663,216.5C 667.548,198.961 672.381,181.627 677.5,164.5C 684.687,164.175 691.687,164.509 698.5,165.5C 690.572,190.785 682.739,216.119 675,241.5C 667.587,242.481 660.087,242.814 652.5,242.5C 648.627,225.009 644.127,207.676 639,190.5C 634.511,207.457 630.177,224.457 626,241.5C 618.558,242.813 611.058,242.813 603.5,241.5C 595.294,216.216 587.294,190.882 579.5,165.5C 586.648,164.508 593.981,164.175 601.5,164.5 Z"/></g>
            <g><path style="opacity:1" fill="#25056b" d="M 729.5,178.5 C 743.186,175.543 751.186,180.876 753.5,194.5C 742.167,194.5 730.833,194.5 719.5,194.5C 720.001,187.344 723.335,182.011 729.5,178.5 Z"/></g>
            <g><path style="opacity:1" fill="#2d0e6f" d="M 415.5,178.5 C 428.697,176.707 436.031,182.373 437.5,195.5C 426.167,195.5 414.833,195.5 403.5,195.5C 403.83,187.154 407.83,181.487 415.5,178.5 Z"/></g>
            <g><path style="opacity:1" fill="#2a0869" d="M 1002.5,180.5 C 1006.44,190.135 1010.1,199.969 1013.5,210C 1006.48,210.831 999.476,210.664 992.5,209.5C 995.842,199.805 999.176,190.138 1002.5,180.5 Z"/></g>
            <g><path style="opacity:1" fill="#9282b5" d="M 784.5,183.5 C 784.5,184.833 784.5,186.167 784.5,187.5C 791.5,187.5 798.5,187.5 805.5,187.5C 798.352,188.492 791.019,188.825 783.5,188.5C 783.216,186.585 783.549,184.919 784.5,183.5 Z"/></g>
            <g><path style="opacity:1" fill="#28086c" d="M 513.5,205.5 C 518.513,224.993 510.847,232.826 490.5,229C 482.442,219.487 484.442,212.821 496.5,209C 502.449,208.516 508.116,207.349 513.5,205.5 Z"/></g>
            <g><path style="opacity:1" fill="#26066c" d="M 831.5,204.5 C 835.479,223.359 827.812,231.525 808.5,229C 801.023,223.451 800.69,217.451 807.5,211C 815.602,208.785 823.602,206.618 831.5,204.5 Z"/></g>
            <g><path style="opacity:1" fill="#8472ab" d="M 889.5,200.5 C 889.5,214.5 889.5,228.5 889.5,242.5C 881.981,242.825 874.648,242.492 867.5,241.5C 874.5,241.5 881.5,241.5 888.5,241.5C 888.171,227.656 888.504,213.99 889.5,200.5 Z"/></g>
            <g><path style="opacity:1" fill="#fcfcfd" d="M 149.5,274.5 C 135.323,274.829 121.323,274.496 107.5,273.5C 129.985,256.083 152.318,238.416 174.5,220.5C 197.198,237.853 219.532,255.686 241.5,274C 227.5,274.667 213.5,274.667 199.5,274C 191.167,267.833 182.833,261.667 174.5,255.5C 166.316,262.085 157.983,268.418 149.5,274.5 Z"/></g>
            <g><path style="opacity:1" fill="#e6e3ee" d="M 907.5,228.5 C 918.158,229.399 920.158,233.899 913.5,242C 905.667,243.5 902.5,240.333 904,232.5C 905.376,231.295 906.542,229.962 907.5,228.5 Z"/></g>
            <g><path style="opacity:1" fill="#301271" d="M 913.5,239.5 C 911.5,240.833 909.5,240.833 907.5,239.5C 908.931,239.119 909.764,238.119 910,236.5C 910.759,238.063 911.926,239.063 913.5,239.5 Z"/></g>
            <g><path style="opacity:1" fill="#361875" d="M 907.5,231.5 C 911.831,229.344 914.497,230.678 915.5,235.5C 915.332,237.171 914.665,238.504 913.5,239.5C 912.744,237.237 912.577,234.903 913,232.5C 911.301,231.594 909.467,231.261 907.5,231.5 Z"/></g>
            <g><path style="opacity:1" fill="#d2cbe0" d="M 907.5,231.5 C 909.467,231.261 911.301,231.594 913,232.5C 912.577,234.903 912.744,237.237 913.5,239.5C 911.926,239.063 910.759,238.063 910,236.5C 909.764,238.119 908.931,239.119 907.5,239.5C 907.5,236.833 907.5,234.167 907.5,231.5 Z"/></g>
            <g><path style="opacity:1" fill="#2f1171" d="M 907.5,231.5 C 907.5,234.167 907.5,236.833 907.5,239.5C 906.007,238.688 905.34,237.355 905.5,235.5C 905.34,233.645 906.007,232.312 907.5,231.5 Z"/></g>
            </svg>
            
        </div>`;

export async function generateHandoverReport(reportTitle: string, description: string, name: string, email: string, image?: Blob | null): Promise<Blob> {
  const htmlOutput = await marked.parse(description, { async: true });

  let imageWrap = '';

  if (image) {
    const resizedBlob = await resizeImageBlob(image, 350 + 210, 350 + 210);
    const base64Image = await imageToBase64(resizedBlob);
    imageWrap = `<div style="margin: 15px; display: inline-block; background-color: white;">
    <img src="data:image/jpeg;base64,${base64Image}" style="display: block;">
  </div>`;
  }

  const pdfWrap = `
  <head>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
      body { 
        margin: 30px; 
        padding-left: 20px;
        padding-right: 20px;
        font-family: 'Roboto', sans-serif; /* Ensure the font-family matches the name and includes fallback */
        overflow: hidden;
      }
    </style>
  </head>
  <body>
    <h1>${reportTitle}</h1>
    ${htmlOutput}
    ${imageWrap}
  </body>`;

  const footerTemplate = `
  <div style="background-color: #23036A; color: #fff; width: 90%; margin-top: 15px; text-align: left; margin-bottom:-20px; padding-top: 15px; padding-right: -20px; padding-bottom: 15px; padding-left: 20px; font-size: 12px;">Generated by ${name} (${email}) 
  ${new Date().toLocaleDateString('en-US', { day: 'numeric' })} 
  ${new Date().toLocaleDateString('en-US', { month: 'short' })} 
  ${new Date().toLocaleDateString('en-US', { year: 'numeric' })}
  </div>
  <div style="background-color: #23036A; width: 10%; margin-top: 15px; text-align: left; margin-bottom:-20px; padding-top:15px; padding-right: -20px; padding-bottom: 15px; padding-left: 15px; font-size: 12px; color: #fff;  ">
  <div>Page <span class="pageNumber"></span>/<span class="totalPages"></span></div>
</div>
  `;

  const response = await fetch('/api/pdf', {
    method: 'POST',
    body: JSON.stringify({
      headerTemplate,
      htmlContent: pdfWrap,
      footerTemplate,
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  });

  const b = await response.blob();

  return b;
}

export function generateDateFilename(prefix: string, extension = 'pdf'): string {
  const d = new Date();
  return `${prefix}-${d.valueOf()}.${extension}`;
}
